<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Awesome Hugo blog</title>
    <link>https://blog.mfcp.fun/tags/blog/</link>
    <description>Recent content in blog on Awesome Hugo blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 26 Aug 2023 01:18:03 +0800</lastBuildDate><atom:link href="https://blog.mfcp.fun/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建git服务器并配置blog自动部署</title>
      <link>https://blog.mfcp.fun/posts/ef734f00e58c413acb9b7f60f8147607/</link>
      <pubDate>Sat, 26 Aug 2023 01:18:03 +0800</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/ef734f00e58c413acb9b7f60f8147607/</guid>
      <description>最方便的还是查看git的官方文档 中关于服务器上git配置的相关章节，比较详细
👉 服务器上的-Git-配置服务器
记录下我搭建过程中的思路以及一些需要注意的点
搭建思路 在本地搭建了hugo配合typora写文章
图片部分使用腾讯云的oss存储实现图床功能 ，（做了防盗链话费不了多钱）
文章写好后推送到github的私有库中，配合action功能自动部署推送到公开库中展示
📑 Github Page 原先计划
在腾讯云搭建git服务，写好文章同时推送到腾讯云 在服务器中安装hugo，使用git中的钩子功能提交文章后在git服务器编译到指定的目录中
这次重新搭建折腾了好久都卡在vps拉取的环节上了，所以放弃
使用action的burnett01/rsync-deployments实现对编译好文件的上传
搭建nginx，配置域名实现公网访问
server { listen 80; server_name blog.mfcp.fun; location / { alias /var/www/blog_site/; } } 问题记录 创建完git用户后设置git-shell,用户就不能登录shell了，正常推送是没有问题的
根据git文档中搭建好git服务后，根据文档中的说明，更改了git用户的默认shell，只能通过git协议推送代码，不能登录shell，但是我们要新建仓库必须要在shell中操作。
两种解决办法 👇
第一是通过高权限账户使用**chsh**命令临时更改git用户的默认shell，创建完在改回去
# 查看系统shell cat /etc/shells # 第二种 chsh -s /bin/sh git #更改git用户的shell 第二种是通过高权限账户创建好文件，然后更改把文件夹的用户和用户组更改为git用户。
创建的目录和文件要注意权限问题，所属权限不是git用户的话后期推送会失败
git的钩子功能post-receive需要可执行权限才能成功执行
由于github page跟腾讯云的baseurl不一致，同一个config文件不能使用,创建单独的配置文件编译
同步到腾讯云ubuntu上需要创建ssh密钥文件，把公钥写入到authorized_keys中，把私钥文件写入到github项目的Security中通过虚拟变量形式来访问
👇以下是成功的action文件shili
# .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-22.</description>
    </item>
    
    <item>
      <title>使用腾讯云cos搭建博客图床</title>
      <link>https://blog.mfcp.fun/posts/da417dd65a33f8a3951f8dac1c31556c/</link>
      <pubDate>Sun, 20 Aug 2023 00:30:33 +0800</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/da417dd65a33f8a3951f8dac1c31556c/</guid>
      <description>本文也是为了记录顺利搭建了cos图床，并开启的新的博客之路的过程 顺便体验一下typora来写文章，上传图片的丝滑操作 不出意外的话本文图片都是直接搭配picgo上传到cos存储中的 使用github搭建图床 github的图床最大的问题是国内访问受限
刚开始使用github的资源搭建了图床，使使用 jsdelivr 做了cdn的加速
虽然小博客没有多少访问需求，但是github的访问时断时续，没有特殊的手段访问的话好多图都是裂了的，
这样的话就导致访问体验就很糟糕，因为有些技术文章都是上传了图片的，看不到图片等于文章也没有什么价值，自己回过头看都想不起来写的是什么，本来文章最主要的功能是方便自己后续记录回忆的。
使用腾讯云cos搭建图床 腾讯云搭建的图床虽然有一点小成本，但是访问不受限，小博客也花费不了多少钱，还能带来更好的使用体验
以下几点注意事项 🔽
做好防盗链，不然钱花费的飞起 有域名备案的可以自定义域名， cos设置成私有读写。（链接简短还省钱） 以下是搭建完成的一些遗憾 👇
如果开启了防盗链，picgo图片预览是不能访问的，暂时还没看到好的方法
直接在浏览器中访问的话由于没有Referer来源，所以也是403不能预览的，好处就是防止别人盗刷流量造成不必要的扣费，不过在浏览器中可以使用一些chrome插件来设置规则添加访问时的请求头，我是用的是 gooreplacer
搭建步骤 在腾讯云中开启cos存储并创建存储桶 在安全设置中创建api密钥 本地下载好 picgo 并做好相关的密钥填写 在腾讯云中开启cdn，并设置好自定义域名（前提是你有个域名并且做好了相关的备案） 搭建完成后配合typora就可以有一个愉快的写作体验了
详细的搭建步骤网上一搜一大堆，而且还很详细，这里就不献丑了，这篇文章也是为了验证cos图床是否能访问成功而写</description>
    </item>
    
    <item>
      <title>从hexo迁移博客到hugo</title>
      <link>https://blog.mfcp.fun/posts/d41d8cd98f00b204e9800998ecf8427e/</link>
      <pubDate>Fri, 04 Aug 2023 00:04:45 +0800</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/d41d8cd98f00b204e9800998ecf8427e/</guid>
      <description>为什么要自己搭建1 刚开始接触编程的时候，看着大佬们都有个自己的博客，就按照教程自己琢磨搭建，正好也学习了编程的相关知识，后来越来越讨厌平台的各种审核删帖，虽然也并不会发什么不该发的东西，但是命门捏在别人手中的感受总是不好的
就一直想着有个自己可以随心所欲写东西的地方，所以搭建了这个博客
hexo搭建 刚开始是使用hexo搭建的，第一呢是因为hexo比较早，用的人也比较多，当时网上找的教程也比较多，能比较方便快捷的搭建起来，出了问题晚上也可以找到一堆教程。
但是hexo有个问题就是渲染文章量不多的话速度还可以， 后来自己写了一些编程笔记后整体渲染笔记就比较慢了。看了看网上各位大佬说的hugo的速度比较快，社区也比较成熟，所以迁移了过来
hugo 刚开始使用了cango主题，刚开始看着各方面还都挺好，后来还是觉得图片太麻烦不太好，而且不简洁，我只需要一个写东西，看东西的方便的主题
找到了目前这个主题hugo-blog-awesome比较符合我的要求，唯一的缺点是没有搜索功能，后期考虑给它加上搜索
这是目前第一篇文章，后期可能把之前的文章同步过来，现在的状况就是比较散乱，有放在notion中的，有在之前腾讯云服务器的。
The above quote is excerpted from Rob Pike&amp;rsquo;s talk during Gopherfest, November 18, 2015.&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>使用hexo部署静态blog</title>
      <link>https://blog.mfcp.fun/posts/2021-04-02-%E4%BD%BF%E7%94%A8hexo%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81blog/</link>
      <pubDate>Fri, 02 Apr 2021 11:13:36 +0000</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/2021-04-02-%E4%BD%BF%E7%94%A8hexo%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81blog/</guid>
      <description>安装hexo 安装node环境
npm install hexo
安装git
廖雪峰-安装git
Hexo 文档👇 (有问题查文档 )
**官方文档** github
使用主题 （fluid）
配置指南 github
&amp;ldquo;Hexo是一个快速，简单且功能强大的博客框架。您使用Markdown（或其他标记语言）编写帖子，然后Hexo会在几秒钟内生成带有精美主题的静态文件&amp;rdquo; - - （官方文档）
安装 网上教程大部分都是安装node,git。有些在服务器上自行部署的还要安装git服务。刚开始有点懵，没有搞懂其中的关系。在服务器上搭建了整套的东西。
如果你是部署到自己的服务器上，那么就只需要在服务器上部署git服务， 每次写完的文章使用hexo生成静态文件，然后同步到你自己的服务器上。 使用nginx转发就可以访问了 如果你部署到GitHub Pages上的话，那么你需要在你电脑上安装git、node， 本地编写新文章后使用git同步到github上。
node.js (hexo主要使用node编写)
git (主要用于拉取和同步代码)
【自建git服务】 这个是在服务器上搭建自己的git服务
配置git hook 使用git hook的目的是为了自动同步每次提交到服务器的静态文件
官方介绍文档 ：git 钩子
#!/bin/bash GIT_REPO=/srv/program/myblog.git TMP_GIT_CLONE=/var/www/tmp_hexo_blog PUBLIC_WWW=/var/www/hexo_blog rm -rf ${TMP_GIT_CLONE} git clone $GIT_REPO $TMP_GIT_CLONE rm -rf ${PUBLIC_WWW} cp -rf ${TMP_GIT_CLONE} ${PUBLIC_WWW} git hook脚本参照了 flyky 的文章
如果git能正常提交，但是钩子脚本没有生效，一般情况下是因为文件目录读写权限的问题，仔细检查相关目录权限就可以了
PUBLIC_WWW 这个目录为hexo生成的静态文件目录
配置nginx 安装参考：👇
sudo yum install nginx</description>
    </item>
    
  </channel>
</rss>
