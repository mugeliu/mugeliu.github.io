<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Awesome Hugo blog</title>
    <link>https://blog.mfcp.fun/tags/git/</link>
    <description>Recent content in git on Awesome Hugo blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 26 Aug 2023 01:18:03 +0800</lastBuildDate><atom:link href="https://blog.mfcp.fun/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建git服务器并配置blog自动部署</title>
      <link>https://blog.mfcp.fun/posts/ef734f00e58c413acb9b7f60f8147607/</link>
      <pubDate>Sat, 26 Aug 2023 01:18:03 +0800</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/ef734f00e58c413acb9b7f60f8147607/</guid>
      
      <description>最方便的还是查看git的官方文档 中关于服务器上git配置的相关章节，比较详细
👉 服务器上的-Git-配置服务器
记录下我搭建过程中的思路以及一些需要注意的点
搭建思路 在本地搭建了hugo配合typora写文章
图片部分使用腾讯云的oss存储实现图床功能 ，（做了防盗链话费不了多钱）
文章写好后推送到github的私有库中，配合action功能自动部署推送到公开库中展示
📑 Github Page 原先计划
在腾讯云搭建git服务，写好文章同时推送到腾讯云 在服务器中安装hugo，使用git中的钩子功能提交文章后在git服务器编译到指定的目录中
这次重新搭建折腾了好久都卡在vps拉取的环节上了，所以放弃
使用action的burnett01/rsync-deployments实现对编译好文件的上传
搭建nginx，配置域名实现公网访问
server { listen 80; server_name blog.mfcp.fun; location / { alias /var/www/blog_site/; } } 问题记录 创建完git用户后设置git-shell,用户就不能登录shell了，正常推送是没有问题的
根据git文档中搭建好git服务后，根据文档中的说明，更改了git用户的默认shell，只能通过git协议推送代码，不能登录shell，但是我们要新建仓库必须要在shell中操作。
两种解决办法 👇
第一是通过高权限账户使用**chsh**命令临时更改git用户的默认shell，创建完在改回去
# 查看系统shell cat /etc/shells # 第二种 chsh -s /bin/sh git #更改git用户的shell 第二种是通过高权限账户创建好文件，然后更改把文件夹的用户和用户组更改为git用户。
创建的目录和文件要注意权限问题，所属权限不是git用户的话后期推送会失败
git的钩子功能post-receive需要可执行权限才能成功执行
由于github page跟腾讯云的baseurl不一致，同一个config文件不能使用,创建单独的配置文件编译
同步到腾讯云ubuntu上需要创建ssh密钥文件，把公钥写入到authorized_keys中，把私钥文件写入到github项目的Security中通过虚拟变量形式来访问
👇以下是成功的action文件shili
# .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-22.</description>
      
    </item>
    
    <item>
      <title>git命令</title>
      <link>https://blog.mfcp.fun/posts/2022-07-07-git%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Jul 2022 17:38:13 +0000</pubDate>
      
      <guid>https://blog.mfcp.fun/posts/2022-07-07-git%E5%91%BD%E4%BB%A4/</guid>
      
      <description>资料：
https://gitee.com/progit/
https://git-scm.com/book/zh/v2/起步-关于版本控制
🕸️ 来源于阮一峰的网络日志
Git远程操作详解
常用 Git 命令清单
安装完成后 需要最后一步设置
# --global参数 这台机器上的所有仓库都会使用这个配置 git config --global user.name &amp;#34;you name&amp;#34; git config --global user.email &amp;#34;email@exemple.com&amp;#34; 工作区：git init的文件夹就是一个工作区 版本库：工作区里面一个隐藏目录 .git (里面有暂存区和master分支)
git add把文件添加进去，实际上是把文件修改添加到暂存区里面，git commit提交更改，实际上是把暂存区的所有内容提交到当前分支上。
git init # 把当前目录编程git管理的仓库 git add &amp;lt;file&amp;gt; # 把当前文件添加到仓库 可以同时添加多个文件 git commit -m &amp;#34;message&amp;#34; # 把文件提交到仓库, -m 后边的是本次提交说明 git status # 查看当前工作区的转态，是否有文件修改 git diff # 查看修改内容 git log # 显示从最近到最远的提交日志， git reflog # 查看历史命令，以确定回到那个版本 git log --pretty=oneline # 只显示commit_id (版本号) git reset --hard commit_id # HEAD指向的版本是当前版本，可以根据commid 回退 git diff HEAD -- &amp;lt;file&amp;gt; # 查看工作区与版本库里面最新版本的区别 git checkout - - file 把file中在工作区的修改全部撤销</description>
      
    </item>
    
  </channel>
</rss>
